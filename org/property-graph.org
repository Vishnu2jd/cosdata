#+TITLE: Property Graph Storage Engine Design Specification
#+AUTHOR: Nithin Mani
#+DATE: 2025-02-09

* Overview
This document outlines the design specification for a property graph storage engine utilizing an inverted index-based approach for efficient entity and relationship storage and retrieval. The system uses sparse vector representations mapped to an inverted index structure, enabling efficient storage and querying of entities, their properties, and relationships.

* Core Data Model

** Entity Encoding
Entities and relationships are converted to sparse vector representations for storage in the inverted index. The implementation accepts arbitrary byte slices as input, allowing for flexible encoding of various types of identifiers and properties. 

** Sparse Vector Representation
Each entity, property, and relationship is represented as a dimension in a sparse vector space:

*** Single Entity (e.g., Person with just ID):
 - One dimension in sparse vector
 - One entry in inverted index

*** Entity with Property:
 - One dimension for entity ID
 - Additional dimension for each filterable property
 - Example: Person(id="person:123", name="alice") has two dimensions

*** Relationship between Entities:
 - One dimension for source entity
 -  One dimension for target entity
 - One dimension for relationship itself
 - Additional dimensions for any filterable relationship properties
 - Example: Person123 -KNOWS{since=2024}-> Person456 has four dimensions

** Vector Dimension Format
Each dimension in the sparse vector is represented by:
- Configuration A: (index_position: u32, map_key: u8, divisor: u64)
- Configuration B: (index_position: u32, divisor: u64)

Example representations:

#+begin_src
# Person with ID and name
Dimension 1 (ID="person:123"):   (45123, 178, 982347)
Dimension 2 (name="alice"):      (12834, 45,  673891)

# Relationship with property
Dimension 1 (Entity1="person:123"):     (45123, 178, 982347)
Dimension 2 (Entity2="person:456"):     (23456, 89,  445678)
Dimension 3 (Rel="knows:789"):          (78901, 234, 123456)
Dimension 4 (prop="since:2024"):        (34567, 123, 789012)
#+end_src

* Storage Architecture

** Inverted Index Structure
The system implements a power-of-4 based inverted index with two possible configurations:

*** Configuration A: 4^8 with Internal Maps
- Total nodes: 65,536 (4^8)
- Each node contains internal map (256 keys)
- Value format: (divisor: u64, file_offset: u32)

*** Configuration B: 4^12 Direct Mapping
- Total nodes: 16,777,216 (4^12)
- Direct key-value storage
- Value format: (divisor: u64, file_offset: u32)

** Implementation Details

#+begin_src rust
// Note: Production systems should use xxHash instead of this simple hash
fn simple_hash(bytes: &[u8]) -> u64 {
   // Simple FNV-1a hash for demonstration
   let mut hash: u64 = 14695981039346656037;
   for byte in bytes {
       hash = hash ^ (*byte as u64);
       hash = hash.wrapping_mul(1099511628211);
   }
   hash
}

// Configuration A (4^8 = 65,536 with internal maps)
fn encode_entity_config_a(bytes: &[u8]) -> (u32, u8, u64) {
   let hash = simple_hash(bytes);
   
   let index_position = (hash % 65536) as u32;
   let map_key = ((hash / 65536) % 256) as u8;
   let divisor = hash / (65536 * 256);
   
   (index_position, map_key, divisor)
}

fn validate_entity_config_a(index_position: u32, map_key: u8, divisor: u64, bytes: &[u8]) -> bool {
   let hash = simple_hash(bytes);
   let reconstructed_hash = divisor * (65536 * 256) + 
                          (map_key as u64) * 65536 + 
                          index_position as u64;
   hash == reconstructed_hash
}

// Configuration B (4^12 = 16,777,216 direct mapping)
fn encode_entity_config_b(bytes: &[u8]) -> (u32, u64) {
   let hash = simple_hash(bytes);
   
   let index_position = (hash % 16_777_216) as u32;
   let divisor = hash / 16_777_216;
   
   (index_position, divisor)
}

fn validate_entity_config_b(index_position: u32, divisor: u64, bytes: &[u8]) -> bool {
   let hash = simple_hash(bytes);
   let reconstructed_hash = divisor * 16_777_216 + index_position as u64;
   hash == reconstructed_hash
}

fn main() {
   // Example with different types of identifiers
   let id_bytes = "person:123".as_bytes();
   let property_bytes = "name:alice".as_bytes();
   
   // Config A
   let (pos_a, key_a, div_a) = encode_entity_config_a(id_bytes);
   println!("Config A Encoding:");
   println!("Index Position: {}", pos_a);
   println!("Map Key: {}", key_a);
   println!("Divisor: {}", div_a);
   println!("Validation: {}", validate_entity_config_a(pos_a, key_a, div_a, id_bytes));
   println!();
   
   // Config B
   let (pos_b, div_b) = encode_entity_config_b(property_bytes);
   println!("Config B Encoding:");
   println!("Index Position: {}", pos_b);
   println!("Divisor: {}", div_b);
   println!("Validation: {}", validate_entity_config_b(pos_b, div_b, property_bytes));
}
#+end_src

* Query Execution

** Lookup Process
1. Calculate hash of the entity/property bytes
2. Determine index position
3. For Configuration A:
  - Use index position to locate storage bucket
  - Calculate remainder and divisor
  - Use remainder as key to locate entry
  - Validate entry using divisor
4. For Configuration B:
  - Use index position to directly locate entry
  - Validate entry using divisor
5. Retrieve entity data using file offset

** Traversal Optimization
- Implicit nodes represent structural relationships
- Explicit nodes store actual entity and relationship data
- Combined approach enables efficient path finding
- Multiple dimensions can be queried in parallel

* Storage Format

** Entity Storage
- Entities stored in separate data files
- File offsets are 32-bit unsigned integers
- Entity records contain type information, properties, and relationship references

** Relationship Storage
- Relationships are first-class entities
- Store both incoming and outgoing node references
- Properties stored similarly to entities

* Performance Considerations

** Space-Time Tradeoffs
*** Configuration A:
 - Lower memory usage for sparse datasets
 - Additional lookup step through internal map
 - Better for memory-constrained systems
*** Configuration B:
 - Higher memory usage
 - Faster direct lookups
 - Better for dense datasets
 - Suitable for systems with abundant memory

** Hashing and Index Considerations
- While this example uses a simple hash function for demonstration, production systems should use xxHash for its superior distribution characteristics, computation speed, collision resistance, and proven reliability in production environments
- Index positions stored as u32 to optimize memory usage, as values never exceed 16,777,216 (4^12)

** Caching Strategy
- Frequently accessed entries kept in memory
- LRU cache for entity data
- Configurable cache sizes based on available memory

** Query Performance
- Each dimension can be queried independently
- Parallel lookup across dimensions possible
- Validation scheme ensures accuracy of results
